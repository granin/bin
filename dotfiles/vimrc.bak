" function to delete duplicate lines
function! Del()
 if getline(".") == getline(line(".") - 1)
   norm dd
 endif
endfunction

:g/^/ call Del()
" " Yank text to the OS X clipboard
"noremap <leader>y "*y
"noremap <leader>yy "*Y
filetype on
set nocompatible               " be iMproved

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

"... your configuration goes here
" Preserve indentation while pasting text from the OS X clipboard
noremap <leader>p :set paste<CR>:put  *<CR>:set nopaste<CR>
" solarized setup from https://github.com/altercation/vim-colors-solarized
syntax enable
let g:solarized_termtrans = 1
colorscheme solarized
"togglebg#map("<F10>") 
"
" a function to execute formd and return the cursor back
" to it's original position within the buffer.
 
" This script assumes formd is in your path at:
" ~/bin/formd/formd
" http://drbunsen.github.com/formd/
 
function! Formd(option)
    :let save_view = winsaveview()
    :let flag = a:option
    :if flag == "-r"
        :%! ~/bin/formd/formd -r
    :elseif flag == "-i"
        :%! ~/bin/formd/formd -i
    :else
        :%! ~/bin/formd/formd -f
    :endif
    :call winrestview(save_view)
endfunction
 
" formd mappings
 
nmap <leader>fr :call Formd("-r")<CR>
nmap <leader>fi :call Formd("-i")<CR>
nmap <leader>f :call Formd("-f")<CR>

" Experiments from Destroy all software **********************************************************************
"

" set autoindent
set switchbuf=useopen
set winwidth=79
set shell=bash
" see shallowsky.com/linux/noaltscreen.html
set t_ti= t_te=

" Colors **********************************************************************
"

set t_Co=256 " 256 colors
syntax on " syntax highlighting
" Default color scheme
"colorscheme solarized
"colorscheme ir_black
set background=dark
if has('gui_running')
      set background=light
else
      set background=dark
endif
 
" -----------------------------------------------------------------------------
" | Startup |
" -----------------------------------------------------------------------------
" load the plugin and indent settings for the detected filetype 
filetype plugin on

" Add recently accessed projects menu (project plugin)
set viminfo^=!
let mapleader = ","
set wildmode=list:longest,full
set autowriteall

set imsearch=0
highlight lCursor guifg=NONE guibg=Cyan
                                 
" Indenting *******************************************************************
set ai " Automatically set the indent of a new line (local to buffer)
set si " smartindent  (local to buffer)

" Scrollbars ******************************************************************
set numberwidth=5

" Windows *********************************************************************
set equalalways " Multiple windows, when created, are equal in size
set splitbelow splitright

"Vertical split then hop to new buffer
:noremap <leader>t :vsp^M^W^W<cr>
:noremap <leader>y :split^M^W^W<cr>

" Cursor highlights ***********************************************************
set cursorline
"set cursorcolumn

" Status Line *****************************************************************
set showcmd     " display incomplete commands
set ch=2 " Make command line two lines high
set ruler       " show the cursor position all the time

" Line Wrapping ***************************************************************
"http://vim.wikia.com/wiki/Word_wrap_without_line_breaks
"When editing a text file, if you want word wrapping, but only want line breaks inserted when you explicitly press the Enter key: 
set wrap  " попросим Vim переносить длинные строки
set nolist  " list disables linebreak
set linebreak " Wrap at word
"
"In addition, you will need to prevent Vim from automatically inserting line breaks in newly entered text. The easiest way to do this is: 

"set textwidth=0
set wrapmargin=0

"If you want to keep your existing 'textwidth' settings for most lines in your file, but not have Vim automatically reformat when typing on existing lines, you can do this with: A

:set formatoptions+=l

" Directories *****************************************************************
" Setup backup location and enable

"set backup

" Set Swap directory
"set directory=~/backup/vim/swap

" Sets path to directory buffer was loaded from
"autocmd BufEnter * lcd %:p:h

" File Stuff ******************************************************************
filetype plugin indent on
" To show current filetype use: set filetype

autocmd FileType html :set filetype=xhtml " we couldn't care less about html

" Sessions ********************************************************************
" Sets what is saved when you save a session
set sessionoptions=blank,buffers,curdir,folds,help,resize,tabpages,winsize

" Misc ************************************************************************
set backspace=indent,eol,start
set number " Show line numbers
set vb t_vb= " Turn off the bell, this could be more annoying, but I'm not sure how
" Files, backups and undo******************************************************
" Turn backup off, since most stuff is in SVN, git anyway...
set nobackup
set nowb
set noswapfile

"Persistent undo
try
  if MySys() == "windows"
    set undodir=C:\Windows\Temp
  else
    set undodir=~expand('$HOME/.vim/tmp')
  endif

  set undofile
catch
endtry

" Tabs ************************************************************************
"set sta " a <Tab> in an indent inserts 'shiftwidth' spaces
" Whitespace stuff
" make uses real tabs   
au FileType make set noexpandtab

syntax match Tab /\t/
"set nowrap
function! Tabstyle_tabs()
  " Using 4 column tabs
  set softtabstop=4
  set shiftwidth=4
  set tabstop=4
  set noexpandtab
  autocmd User Rails set softtabstop=4
  autocmd User Rails set shiftwidth=4
  autocmd User Rails set tabstop=4
  autocmd User Rails set noexpandtab
endfunction

function! Tabstyle_spaces()
  " Use 2 spaces
  set softtabstop=2
  set shiftwidth=2
  set tabstop=2
  set expandtab
endfunction

if hostname() == "Misha-Granins-MacBook-Air.local"
  call Tabstyle_tabs()
else
  call Tabstyle_spaces()
endif

" Mouse ***********************************************************************
" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif
"behave xterm
"set selectmode=mouse

" Ruby stuff ******************************************************************
compiler ruby " Enable compiler support for ruby
map <F5> :!ruby %<CR>

" Omni Completion *************************************************************
if has('autocmd')
  autocmd FileType html :set omnifunc=htmlcomplete#CompleteTags
  autocmd FileType python set omnifunc=pythoncomplete#Complete
  autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
  autocmd FileType css set omnifunc=csscomplete#CompleteCSS
  autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
  autocmd FileType php set omnifunc=phpcomplete#CompletePHP
  autocmd FileType c set omnifunc=ccomplete#Complete
  autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete " may require ruby compiled in
endif

" -----------------------------------------------------------------------------
" | OS Specific |
" | (GUI stuff goes in gvimrc) |
" -----------------------------------------------------------------------------

" Mac *************************************************************************
if has("mac")
  nmap <silent> <D-Left> <C-o>
  nmap <silent> <D-Right> <C-i>
endif

" Change which file opens after executing :Rails command
let g:rails_default_file='config/database.yml'

set ofu=syntaxcomplete#Complete

"====================================
" отключить автоматическое открытие новой строки комментария
" set formatoptions-=o

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
	  \ | wincmd p | diffthis
endif
" MacVIM shift+arrow-keys behavior (required in .vimrc)
if has("gui_macvim")
    let macvim_hig_shift_movement = 1
endif
 
" сохранять умные резервные копии ежедневно
function! BackupDir()
    " определим каталог для сохранения резервной копии
    let l:backupdir=$HOME.'/.vim/backup/'.
	    \substitute(expand('%:p:h'), '^'.$HOME, '~', '')
 
    " если каталог не существует, создадим его рекурсивно
    if !isdirectory(l:backupdir)
	call mkdir(l:backupdir, 'p', 0700)
    endif
 
    " переопределим каталог для резервных копий
    let &backupdir=l:backupdir
 
    " переопределим расширение файла резервной копии
    let &backupext=strftime('~%Y-%m-%d~')
endfunction
 
" выполним перед записью буффера на диск
autocmd! bufwritepre * call BackupDir()
 
" хранить больше истории команд ...
set history=1000     " keep 50 lines of command line history
 
" ... и правок
set undolevels=2048
 
" меньше приоритета бинарным файлам при автодополнении
set suffixes+=.png,.gif,.jpg,.jpeg,.ico
 
" информация о положении курсора в строке статуса
"set statusline+=%=Col:%3*%03c%*\ Ln:%3*%04l/%04L%*
" информация о типе и атрибутах файла в строке статуса
"set statusline+=%(\ File:%3*%{join(filter([&filetype,&fileformat!=split(&fileformats,\",\")[0]?&fileformat:\"\",&fileencoding!=split(&fileencodings,\",\")[0]?&fileencoding:\"\"],\"!empty(v:val)\"),\"/\")}%*%)
" показывать имя буфера в заголовке терминала
set title
" формат заголовка
set titlestring=%t%(\ %m%)%(\ %r%)%(\ %h%)%(\ %w%)%(\ (%{expand(\"%:p:~:h\")})%)\ -\ VIM

" удалять лишние пробелы при отступе
set shiftround
 
" не менять позицию курсора при прыжках по буферу
set nostartofline
 
" расстояние до края при вертикальной прокрутке
" When the page starts to scroll, keep the cursor 8 lines from
" the top and 8 lines from the bottom
set scrolloff=8
 
" размер прыжка при вертикальной прокрутке
set scrolljump=10 
" расстояние до края при горизонтальной прокрутке
set sidescrolloff=10
 
" размер прыжка при горизонтальной прокрутке
set sidescroll=10
 
" разбивать окно горизонтально снизу
"set splitbelow
 
" разбивать окно вертикально справа
"set splitright
 
" не выравнивать размеры окон при закрытии
"set noequalalways
 
" не вставлять лишних пробелов при объединении строк
set nojoinspaces
" показывать совпадающие скобки для HTML-тегов
set matchpairs+=<:>
 
" сделать строку команд больше
set cmdheight=2
 
" сделать окно команд больше
set cmdwinheight=16
 
" показывать строку вкладок всегда
set showtabline=2
 
" показывать строку статуса всегда
" tell Vim to always put a status line in, even if there is only one
" window
set laststatus=2
 
" информация о флагах файла и его пути в строке статуса
"set statusline=%1*%m%*%2*%r%*%3*%h%w%*%{expand(\"%:p:~\")}\ %<
 
"Порядок применения кодировок и формата файлов
 
set ffs=unix,dos,mac
set fencs=utf-8,cp1251,koi8-r,ucs-2,cp866

" Remember last location in file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif

" Syntax coloring lines that are too long just slows down the world
set synmaxcol=2048
" This is the timeout used while waiting for user input on a
" multi-keyed macro or while just sitting and waiting for another
" key to be pressed measured in milliseconds.
"
" i.e. for the ",d" command, there is a "timeoutlen" wait
"      period between the "," key and the "d" key.  If the
"      "d" key isn't pressed before the timeout expires,
"      one of two things happens: The "," command is executed
"      if there is one (which there isn't) or the command aborts.
"
" The idea here is that if you have two commands, say ",dv" and
" ",d" that it will take 'timeoutlen' milliseconds to recognize
" that you're going for ",d" instead of ",dv"
"
" In general you should endeavour to avoid that type of
" situation because waiting 'timeoutlen' milliseconds is
" like an eternity.
set timeoutlen=500

" These commands open folds
set foldopen=block,insert,jump,mark,percent,quickfix,search,tag,undo

" dont Allow the cursor to go in to "invalid" places
set virtualedit+=block

" Make command line two lines high
set ch=1

" set visual bell -- I hate that damned beeping
" убираем звук переключения раскладки
set vb

" allow backspacing over everything in insert mode
" Allow backspacing over indent, eol, and the start of an insert

" Set the status line the way I like it
set stl=%f\ %m\ %r\ Line:\ %l/%L[%p%%]\ Col:\ %c\ Buf:\ #%n\ [%b][0x%B]

" Hide the mouse pointer while typing
set mousehide

" The GUI (i.e. the 'g' in 'gvim') is fantastic, but let's not be
" silly about it :)  The GUI is fantastic, but it's fantastic for
" its fonts and its colours, not for its toolbar and its menus -
" those just steal screen real estate
set guioptions=ac
"BASIC
"=====================
" http://www.derekwyatt.org/vim/the-vimrc-file/the-absolute-bare-minimum/
" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
" Forget being compatible with good ol' vi

" MISC
"=====================
"http://www.derekwyatt.org/vim/the-vimrc-file/better-settings/
" Set the search scan to wrap around the file
set wrapscan

" Set the forward slash to be the slash of note.  Backslashes suck
" This is really only applicable to Windows but I like to have a vimrc
" that works no matter what OS I'm currently on
set shellslash

"Mac OS X clipboard sharing
set clipboard=unnamed

"================

" не выгружать скрытые буферы
set hidden
"
" Don't update the display while executing macros
set lazyredraw
"set lz " ленивая перерисовка экрана при выполнении скриптов

" At least let yourself know what mode you're in
set showmode

" Enable enhanced command-line completion. Presumes you have compiled
" with +wildmenu.  See :help 'wildmenu'
set wildmenu
"================
 
set incsearch       " do incremental searching
"
 
 let g:PreviewBrowsers=' firefox,safari,epiphany,google-chrome,opera' 
 let g:PreviewCSSPath='/path/to/css/file'
 let g:PreviewTextileExt='textile,txt'

"================
"Далее настроим поиск и подсветку результатов поиска и совпадения скобок
" Searching *******************************************************************
set hlsearch " highlight search
" Incrementally match the search.  I orignally hated this
" but someone forced me to live with it for a while and told
" me that I would grow to love it after getting used to it...
" turns out he was right :)
set incsearch " incremental search, search as you type
set showmatch 
set smartcase " Vim ищет игнорируя регистр если искомое выражение не содержит большие буквы, в противном случае учитывает регистр.

"================
set ai " включим автоотступы для новых строк
" перечитывать изменённые файлы автоматически
set autoread
if has("unix")
 
    " кодировка по-умолчанию
    set encoding=utf-8
 
endif
 
" порядок перебора кодировок
set fileencodings=utf-8,windows-1251,iso-8859-15,koi8-r
 
" порядок перебора типов EOL
set fileformats=unix,dos,mac
 
" максимальное число вкладок
set tabpagemax=99
 
if has("folding")
 
    " сворачивать по отступам
    set foldmethod=indent
 
    " не сворачивать рекурсивно
    set foldlevel=99
endif
" Set region to British English
" и русский
:setlocal spell spelllang=ru,en_us
"
" хранить swap в отдельном каталоге
set directory=~/.vim/swap/
" включить сохранение резервных копий
set backup
"backup system 
" Directories for swp files
set backupdir=~/.vim/backup
set directory=~/.vim/backup

"=========================================
"=====VISUAL APPEARANCE====================
"=========================================
" Underlining search results in vim (instead of highlighting them)
hi Tab gui=underline guifg=blue ctermbg=blue 

"no extension files are what?
"au BufNewFile,BufRead * if &ft == '' | set ft=markdown | endif

" --- подсветка ---
 
" подсветка строки статуса
highlight user1 term=bold cterm=inverse,bold ctermbg=green gui=inverse,bold guibg=#8AE234
highlight user2 term=bold cterm=inverse,bold ctermbg=red gui=inverse,bold guibg=#EF2929
highlight user3 term=bold cterm=inverse,bold ctermbg=blue gui=inverse,bold guibg=#729FCF
" подсветка непечатаемых символов
highlight specialkey ctermfg=lightgray guifg=#D3D7CF
highlight nontext ctermfg=gray guifg=#D3D7CF
 
" подсветка вкладок
highlight tabline term=none cterm=none ctermbg=lightgray gui=none guibg=#D3D7CF
highlight tablinefill term=none cterm=none ctermbg=lightgray gui=none guibg=#D3D7CF
 

" --- аббревиатуры ---
 
" autocorrection 
iab gh. GitHub
iab verr version
iab winn windows
iab US United States
iab есп  YES!+
iab seva Seva
iab sadhana Sadhana
iab satsang Satsang
" From Typinator 20705
iab zgotit did you get the message below? 
"iab .tt .textile
"iab 08 89641236080
"iab b&t Books and Tapes
"iab : :)
iab .c. .com
iab .o. .org
iab hse he/she 
iab ill I'll 
iab Ill I'll
iab xgth пересыла
iab x77 +73952
iab x33 +37529
iab xhh +73952428182
iab xbb +79025780188
iab xmm +79641236080
iab xvv +375296029594
iab xap application 
iab xru Russia 
iab xaol Art of Living
iab xbs brainstorm
iab xdev develop
iab xfb Facebook 
iab xfl flickr 
iab xfw forward
iab xg google
iab xgui graphical user interface
iab xgj Guruji
iab xww http://www.{^}.com
iab xdu https://dl.dropbox.com/u/347817/
iab xikt Irkutsk
iab xmow Moscow
iab xkgd Kaliningrad
iab xspb St. Petersburg
iab xksk Krasnoyarsk
iab xkrr Krasnodar
iab xkbd keyboard
iab xe email
iab x! Misha Granin
iab x@ @granin.net
iab xn @granin.net
iab xM Misha
iab xG Granin
iab xmsg message
iab xm Misha
iab xg Granin
iab xna next action
iab xos open source 
iab xosp open source project 
iab xoss open source software
iab xru russian
iab xRu Russia
iab xsk skype: 
iab xkk Skype ID: m.granin 
iab xdb DropBox
" Russian

iab ,l.  DropBox
iab ьдб  DropBox
"REMAPS
"==========================================
let mapleader = ","
let maplocalleader = ","

"swapping

"To use this mapping: first, delete some text (using a command such as daw or dt in normal mode, or x in visual mode). Then, use visual mode to select some other text, and press Ctrl-X. The two pieces of text should then be swapped.

:vnoremap <C-X> <Esc>`.``gvP``P

 "use gc to swap the current character with the next, without changing the cursor position:

:nnoremap <silent> gc xph
"o use gl to swap the current word with the previous, keeping cursor on current word: (This feels like pushing the word to the left.) (See note.)

:nnoremap <silent> gl "_yiw?\w\+\_W\+\%#<CR>:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><c-o><c-l>

"o use gr to swap the current word with the next, keeping cursor on current word: (This feels like "pushing" the word to the right.) (See note.)

:nnoremap <silent> gr "_yiw:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><c-o>/\w\+\_W\+<CR><c-l>

"To use gw to swap the current word with the next, without changing cursor position: (See note.)
":nnoremap <silent> gw "_yiw:s/\(\%#\w\+\)\(\W\+\)\(\w\+\)/\3\2\1/<CR><c-o><c-l>
" This version will work across newlines:
:nnoremap <silent> gw "_yiw:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><c-o><c-l>

"RagTag
 "=====================
	inoremap <M-o>       <Esc>o
	inoremap <C-j>       <Down>
	let g:ragtag_global_maps = 1
"==========================================
"  Markdown to HTML
nmap <leader>G :%!/usr/local/bin/Markdown.pl --html4tags <cr>

"Color change
map <silent><leader>c :NEXTCOLOR<cr>
map <silent><leader>C :PREVCOLOR<cr><ESC>
"WINDOWS
"=========================================
"http://www.derekwyatt.org/vim/the-vimrc-file/walking-around-your-Windows/

noremap <silent> - <C-W>
nmap <silent> <unique> <leader><leader> :wincmd w<cr>

" Close the window below this one
noremap <silent> +J :wincmd j<cr>:close<cr>

" Close the window above this one
noremap <silent> +K :wincmd k<cr>:close<cr>

" Close the window to the left of this one
noremap <silent> +H :wincmd h<cr>:close<cr>

" Close the window to the right of this one
noremap <silent> +L :wincmd l<cr>:close<cr>

"=========================================
"EDIT / SOURCES FILES
map ,v :vsp ~/.vimrc<CR>

autocmd! bufwritepost $VIM/.vimrc source $VIM/.vimrc
" And to source this file as well (mnemonic for the key sequence is
" 's'ource 'v'imrc)
"nmap <silent> ,sv :so $MYVIMRC<cr>
"" Source the vimrc file after saving it
if has("autocmd")
  autocmd bufwritepost .vimrc source $MYVIMRC
endif
"map ,V :source $MYVIMRC<CR>
"autocmd! bufwritepost $VIM/.vimrc source $VIM/.vimrc

"TOGGLES
"=====================
"http://www.derekwyatt.org/vim/the-vimrc-file/toggling-and-shortening/

" Turn off that stupid highlight search"was 
" <silent> <leader>z  :set
nmap <CR>:set hlsearch!<CR> 
nmap <leader>z:set invhlsearch 
" Set text wrapping toggles
nmap  ,] :set invwrap
" Set up retabbing on a source file
"nmap  ,rr :1,$retab

" ZoomWin configuration
"map <Leader><Leader> :ZoomWin<CR>
map -- :ZoomWin<CR>

" CTags
"map <Leader>rt :!ctags --extra=+f -R *<CR><CR>

" Inserts the path of the currently edited file into a command
"zsh:1: command not found: m
" Command mode: Ctrl+P
cmap <C-P> <C-R>=expand("%:p:h") . "/" <CR>

" Unimpaired configuration
" Bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e
" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv

" Toggle spell checking on and off with `,y`
nmap <silent> <leader>S :set spell!<CR>
 
" исправить отступы при вставке из внешнего буфера
noremap <silent>,p u:set paste<CR>.:set nopaste<CR>:echo "pasted text fixed"<CR>
 
" сохранять выделение при визуальном изменении отступа
vnoremap < <gv
vnoremap > >gv
 
" более логичное копирование во внутренний буфер
nnoremap Y y<END>

" более логичная запись макроса
"nnoremap Q qq

" поиск слова под курсором не целиком
nnoremap * g*N
nnoremap # g#N
 
" не перепрыгивать через длинные строки при включённом переносе строк
nnoremap j gj
nnoremap k gk
noremap j gj
vnoremap k gk
nnoremap <DOWN> gj
nnoremap <UP> gk
vnoremap <DOWN> gj
vnoremap <UP> gk
inoremap <DOWN> <C-O>gj
inoremap <UP> <C-O>gk
 
" сохранять строку курсора при page up/down
nnoremap <PAGEUP> <C-U>
nnoremap <PAGEDOWN> <C-D>
inoremap <PAGEUP> <C-O><C-U>
inoremap <PAGEDOWN> <C-O><C-D>
vnoremap <PAGEUP> <C-U>
vnoremap <PAGEDOWN> <C-D>
 
" Insert New Line **************************************************************
"Insert newline without entering insert mode
"map <S-Enter> O<ESC> 
map <S-Enter> i
map <S-M-Enter> o<Esc>
map <M-Enter> O<Esc>
nnoremap <C-I> ciW<CR><Esc>:if match( @", "^\\s*$") < 0<Bar>exec "norm P-$diw+"<Bar>endif<CR>

set fo-=r " do not insert a comment leader after an enter, (no work, fix!!)
"(Shift)Enter to toggle INSERT
function! ToggleEnterMapping()
  if empty(mapcheck('<CR>', 'i'))
    inoremap <CR> <Esc>`^
    return "\<Esc>"
  else
    iunmap <CR>
    return "\<CR>"
  endif
endfunction
call ToggleEnterMapping()

inoremap <expr> <S-CR> ToggleEnterMapping()
" Optional (so <CR> cancels prefix, selection, operator).
"nnoremap <CR> <Esc>
"vnoremap <CR> <Esc>gV
"onoremap <CR> <Esc>
 

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>
"пробелом перехд из normal в insert mode
":nm <Space> i

"js check
cabbr js !js ~/bin/js/runjslint.js "`cat %`" \| ~/bin/python/format_lint_output.py
" Additional  my additions to vimrc  ****************************
 "------------------------------------------------------------------------
"experimental try to switch off camel case syntax. 
syn match NoSpell /\u\l\+\%(\u\l\+\)\+/ contains=@NoSpell
syn match CamelCase "\<\%(\u\l*\)\{2,}\>" contains=@NoSpell
syn match CamelCase2 transparent "\<\%(\u\l*\)\{2,}\>" contains=@NoSpell contained
au Syntax * syn match CamelCase "\<\%(\u\l*\)\{2,}\>" transparent containedin=.*Comment.* contains=@NoSpell contained

 "-------CAMELCASE MOTION-------------------------------------------------
   
"EXAMPLE: Replace the default|w|,|b| and|e| mappings instead of defining additional mappings|,w|,|,b| and|,e|: >
    map <silent> w <Plug>CamelCaseMotion_w
    map <silent> b <Plug>CamelCaseMotion_b
    map <silent> e <Plug>CamelCaseMotion_e
    sunmap w
    sunmap b
    sunmap e

"EXAMPLE: Replace default|iw|text-object and define|ib|and |ie|motions: >
    omap <silent> iw <Plug>CamelCaseMotion_iw
    xmap <silent> iw <Plug>CamelCaseMotion_iw
    omap <silent> ib <Plug>CamelCaseMotion_ib
    xmap <silent> ib <Plug>CamelCaseMotion_ib
    omap <silent> ie <Plug>CamelCaseMotion_ie
    xmap <silent> ie <Plug>CamelCaseMotion_ie

"cd ~/txt/

set keymap=russian-jcukenwin 
set iminsert=0
 " Ignore CamelCase words when spell checking
fun! IgnoreCamelCaseSpell()
    syn match CamelCase /\<[A-Z][a-z]\+[A-Z].\{-}\>/ contains=@NoSpell transparent
    syn cluster Spell add=CamelCase
endfun
autocmd BufRead,BufNewFile * :call IgnoreCamelCaseSpell()

" -----------------------------------------------------------------------------
" | Plugins |
" -----------------------------------------------------------------------------
" NERDTree ********************************************************************
nmap <silent> <unique> <leader>U :NERDTreeToggle<CR>
nmap <silent> <unique> <leader>/ :NERDTreeFind<CR>

" User instead of Netrw when doing an edit /foobar
let NERDTreeHijackNetrw=1

" Single click for everything
let NERDTreeMouseMode=1

" Ignoring java class files
let NERDTreeIgnore=['.class$', '\.rbc$', '\~$']

" fuzzyfinder_textmate ********************************************************
nmap <silent> <leader>R :FufFile<CR>
nmap <silent> <leader>L :FufBuffer<CR>
let g:fuzzy_ignore = '.o;.obj;.bak;.exe;.pyc;.pyo;.DS_Store;.db'

" Command-T *******************************************************************
"let g:CommandTMatchWindowAtTop = 1
nmap <silent> <Leader>r :CommandT<CR>
nmap <silent> <Leader>gt :CommandTFlush<cr>\| :CommandT<CR> ~/Dropbox/txt<cr>
nmap <silent> <Leader>I :CommandTBuffer<CR>

" CtrlP *******************************************************************
  "let g:ctrlp_max_height = 40
  "let g:ctrlp_match_window_bottom = 1
  "let g:ctrlp_cmd = 'CtrlP'
  "let g:ctrlp_map = '<c-k>'
let g:ctrlp_jump_to_buffer = 2
let g:ctrlp_working_path_mode = 2
let g:ctrlp_custom_ignore = {
      \ 'dir':  '\.git$\|\.hg$\|\.svn$',
      \ 'file': '\.exe$\|\.fileso$\|\.dll$',
      \ 'link': 'some_bad_symbolic_links',
      \ }
let g:ctrlp_user_command = 'find %s -type f' 
"and some from command-T can be useful for ctrl
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*.so 
set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX bullshit

set wildignore+=*.luac                           " Lua byte code

set wildignore+=migrations                       " Django migrations
set wildignore+=*.pyc                            " Python byte code

set wildignore+=*.orig                           " Merge resolution files
set wildignore+=*~,*.class,*.sqlite3,*.o,*.obj,*.rbc

" Gundo ***********************************************************************
nmap <silent> <unique> <leader>u :GundoToggle<CR>

" autocomplpop ****************************************************************
" complete option
" settings for completion 
" like
set complete=.,w,b,t
"set complete=.,w,b,u,t,k
"let g:AutoComplPop_CompleteOption = '.,w,b,u,t,k'
"set complete=.
let g:AutoComplPop_IgnoreCaseOption = 0
let g:AutoComplPop_BehaviorKeywordLength = 2

" Mappings ********************************************************************
"map <C-P><C-P> :ClearCtrlPCache<CR>
nmap <leader>б ea,<ESC>w
" исправляем слово под курсором на первое попавшееся
nmap <leader>j 1z=
" по Alt-1 редактировать текущее слово
nnoremap <M-1> ciw

" по Alt-5 изменять хвост текущего слова
nnoremap <M-5> cw
nnoremap * *N
vnoremap * y :execute ":let @/=@\""<CR> :execute "set hlsearch"<CR>
" Professor VIM says '87% of users prefer jj over esc', jj abrams strongly disagrees
imap чч <Esc>
imap xx <Esc>
imap ''  
cmap '' 
imap ээ 
cmap ээ 

imap uu _
"imap hh =>
"imap aa @

imap <Space>. ,<Space>
inoremap § ё
inoremap ± Ё

cnoremap § ё
cnoremap ± Ё

nnoremap § ё
nnoremap ± Ё

imap OA <ESC>kli
imap OB <ESC>jli
imap OC <ESC>lli
imap OD <ESC>hli

" Rails.vim shortcuts ********************************************************
"nmap <silent> <unique> <leader>s :.Rake<CR>
"nmap <silent> <unique> <leader>S :Rake<CR>
"nmap <silent> <unique> <leader>- :Rake -<CR>

" Shortcuts********************************************************************
" alt+n or alt+p to navigate between entries in QuickFix
map <silent> <m-p> :cp <cr>
map <silent> <m-n> :cn <cr>
nmap <silent> <leader>i 1z=
"nmap <silent> <unique> <C-S-Down> :A<CR>
"dashed line above current
nmap <silent> <leader>= O<ESC><down>o========================================================================<CR><CR><ESC>
nmap <silent> <leader>- O<ESC><down>o------------------------------------------------------------------------<CR><CR><ESC>

nmap <silent> <unique> <leader>s :w<CR> <C-z>
nmap <silent> <unique> <leader>q :wa<CR>:qa<CR>
nmap <silent> <unique> <leader>Z "*x
"nmap <silent> <unique> <leader>P "*p
nmap <silent> <unique> <Space> <PageDown>
nmap <silent> <unique> <S-Space> <PageUp>
nmap <silent> <unique> <C-S-Left> <C-o>
nmap <silent> <unique> <C-S-Right> <C-i>
" Work with vim-projects
nmap <silent> <leader>J <Plug>ToggleProject

"variable %% for all commands below
cnoremap %% <C-R>=expand('%:h').'/'<cr>
" Opens an edit command with the path of the currently edited file filled in
" Normal mode: <Leader>e
nmap <unique> <leader>aw :e %%
" Opens a tab edit command with the path of the currently edited file filled in
" Normal mode: <Leader>t
nmap <unique> <leader>at :tabe %%
nmap <unique> <leader>as :sp %%
nmap <unique> <leader>av :vsp %%

" cd to the directory containing the file in the buffer
nmap <unique> <leader>ac :lcd %:h
" cd to the ~/txt directory 
nmap <unique> <leader>ar :lcd ~/txt

" Make the directory that contains the file in the current buffer.
" This is useful when you edit a file in a directory that doesn't
" (yet) exist     
nmap <unique> <leader>am :!mkdir -p %:p:h

" подсвечивать некоторые символы
" Set list Chars - for showing characters that are not
" normally displayed i.e. whitespace, tabs, EOL
nmap <unique><leader>K :set list!<CR>
" установим символы для подсветки
"if has("unix")
    "set listchars=tab:❘-,trail:·,extends:»,precedes:«,nbsp:×
    "set showbreak=…
"else
    "set listchars=tab:+-,trail:?,extends:>,precedes:<,nbsp:?
"endif
"Показываем табы в начале строки точками
"set listchars=tab:▸\ ,eol:¬
"set listchars=tab:··
"
"------------------------------------------------------------------------
"
function! <SID>StripTrailingWhitespaces()
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  %s/\s\+$//e
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

if has('autocmd')
  autocmd FileType html let g:html_indent_strict=1
  autocmd BufNewFile,BufRead Gemfile setfiletype ruby
  autocmd BufNewFile,BufRead *.j setfiletype objc
  autocmd BufWritePre *.rb,*.py,*.js :call <SID>StripTrailingWhitespaces()
endif
" -----------------------------------------------------------------------------
"VUNDLE STUFF

" don't Automatically detect file types.
filetype on
"filetype off" required!

 set rtp+=~/.vim/bundle/vundle/
 call vundle#rc()

 " let Vundle manage Vundle
 " required! 
Bundle 'gmarik/vundle' 
" My Bundles here:
" original repos on github

Bundle 'gmarik/vundle' 
"Bundle 'danchoi/soywiki'                            
"Bundle 'vim-scripts/YankRing.vim'
Bundle 'bkad/CamelCaseMotion'                      
Bundle 'kien/ctrlp.vim'
"Bundle 'shemerey/vim-project'                      
"Bundle 'vim-scripts/netrw.vim'                     
"Bundle 'tsaleh/vim-align'                          
"Bundle 'vim-scripts/vimwiki.git'                   
Bundle 'vim-scripts/ZoomWin'                       
Bundle 'vim-scripts/Color-Sampler-Pack'            
"Bundle 'hallettj/jslint.vim'                       
"Bundle 'jcf/rvm_ruby.vim'                          
Bundle 'vim-scripts/MailApp'                       
Bundle 'vim-scripts/ScrollColors'                  
Bundle 'vim-scripts/translit_converter'            
Bundle 'tpope/vim-ragtag'                          
Bundle 'slack/vim-bufexplorer'                     
Bundle 'altercation/vim-colors-solarized'          
Bundle 'kchmck/vim-coffee-script'                  
Bundle 'Lokaltog/vim-easymotion'                   
Bundle 'mattn/gist-vim'                            
Bundle 'itspriddle/vim-jquery'                     
Bundle 'michaeljsmith/vim-indent-object'           
Bundle 'vim-scripts/Conque-Shell'
Bundle 'tpope/vim-pastie'                          
Bundle 'gerardc/vim-padrino'                       
Bundle 'tpope/vim-repeat'                          
Bundle 'tpope/vim-speeddating'                     
Bundle 'tpope/vim-markdown'                        
Bundle 'cakebaker/scss-syntax.vim'                 
Bundle 'sophacles/vim-outliner'                    
Bundle 'bbommarito/vim-slim'                       
Bundle 'tpope/vim-rails'                           
Bundle 'tpope/vim-cucumber'                        
Bundle 'tpope/vim-haml'                            
Bundle 'scrooloose/nerdtree'                       
Bundle 'mileszs/ack.vim'                           
Bundle 'godlygeek/tabular'                         
Bundle 'tpope/vim-fugitive'                        
Bundle 'srushti/snipmate.vim'                      
Bundle 'scrooloose/nerdcommenter'                  
Bundle 'duff/vim-bufonly'                          
Bundle 'tpope/vim-endwise'                         
Bundle 'tpope/vim-surround'                        
Bundle 'tpope/vim-unimpaired'                      
Bundle 'tpope/vim-rake'                            
Bundle 'pangloss/vim-javascript'                   
Bundle 'Townk/vim-autoclose'                       
Bundle 'ecomba/vim-ruby-refactoring'               
Bundle 'nelstrom/gundo.vim'                        
Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
Bundle 'stacruz/sparkup.git'
Bundle 'jpalardy/vim-slime.git'
Bundle 'duff/vim-scratch'
Bundle 'vim-scripts/Rainbow-Parenthesis'
Bundle 'docunext/closetag.vim'
Bundle 'kevinw/pyflakes-vim'
Bundle 'vim-scripts/Better-CSS-Syntax-for-Vim'
Bundle 'skammer/vim-css-color'
Bundle 'Raimondi/delimitMate'
Bundle 'tpope/vim-pathogen'                        
Bundle 'cwoac/nvim'
"Bundle 'Lokaltog/vim-powerline'
"Bundle 'robgleeson/hammer.vim'                     
"Bundle 'khussein/vimchat.git'   
"Bundle 'ervandew/supertab'     "kills autocompletion
"Bundle 'minibufexpl.vim'       "doesn't stict to bottom so takes space
"when window is resized
"Bundle 'godlygeek/csapprox'    "kills colorschemes in terminal, works
"after sourcing vimrc again
"Bundle 'shemerey/vim-peepopen' "no need as i live in terminal
"Bundle 'chrismetcalf/vim-yankring'               "obstricts ctrlp

" vim-scripts repos
" Bundle 'L9'
"Bundle 'FuzzyFinder'

" non github repos
Bundle 'git://git.wincent.com/command-t.git'
"
"------------------------------------------------------------------------
"
"colorscheme ir_black
